<style type="text/css">
pre > div { color:red; font-weight: bold }
pre > span { color:red; font-weight: bold }
</style>
<div class="left-side" id="myScrollspy">

    <ul class="nav nav-pills">
        <li><a href="#summary">Introduction</a></li>
        <li><a href="#environment">Development Environment</a></li>
        <li><a href="#import">Using SGUtil</a></li>
        <li><a href="#init">Initialization</a></li>
        <li><a href="#lifecycle">SGUtil Lifecycle Events</a></li>
        <li><a href="#listener">SGUtil Callback Listener</a></li>
    </ul>

</div>

<div class="right-side">

    <section id="summary">
        <h1>Introduction</h1>
        <p>
            There are many app/game market operators, such as UC, XiaoMi, Huawei, etc. These operators are also called channels.
			All of them have different specifications, and those specifications are always evoluting.
            As a result, it's very difficult to integrate your application with so many channels and keep them updated.
            To liberate you from this unimaginable task, SG Studios provides a solution by abstracting the channels' client SDKs
			and server interfaces into thin layers. With this solution you do not need care about details in various SDKs any more.
			Instead what you need to to is only integrating with SGUtil software package and send your APKs to SG Studios.
			SG Studios will then re-package them with channel SDKs you need to generate new APKs. Thus your workload get dramatically
			decreased. For the server side, what you need to do is to implement a simple game server (you may use SG Studios's server
            if you do not need complex features) that manages app/game properties and orders.
        </p>
        <p>
            You need to register your application at channel sites and SG Studios site in order to utlize SG Studios's service.
			You should share the information generated by channel sites with SG Studios.
        </p>
        <p>
            This page illustrates how to integrate with SGUtil. Please refer to <a href=<%= "assets/html/" + lang + "/android/jdoc/sgutil/index.html"%>> SGUtil Document</a>
			for details.
        </p>
    </section>

    <section id="environment">
        <h1>Development Environment</h1>
        <h3>1. Minimum Android version requirement: </h3>
        <p>SGUtil requires Android version not lower than 4.4 (KitKat, API Level 19) to run. We also recommend you use Android Studios as your
           main development environment.</p>
        <img src=<%= "assets/img/" + lang + "/android/hl_android_kitkat.png"%> class="img-responsive"/>
        <br />

        <h3>2. Download SGUtil library</h3>
        <ul>
            <li><a href="/sdk/android/sgutil.aar">SGUtil Library (sgutil.aar)</a></li>
        </ul>
        <br />
        
        <h3>3. Sample application</h3>
        <%- include ../code/java-china-sgutil-sample-app.html -%>

    </section>

    <section id="import">

        <h1>Using SGUtil</h1>
        
		<h3>1. Launch Android Studios, create a new project</h3>

		<p>The example has its application name being "HappyLearning", directory being "hl" and organization name being "cp.com ".</p>
		
        <img src=<%= "assets/img/" + lang + "/android/hl_new_project.png"%> class="img-responsive"/>
        <br/>

		<h3>2. Choose a target device</h3>
        <img src=<%= "assets/img/" + lang + "/android/hl_target_dev.png"%> class="img-responsive"/>
        <br/>

		<h3>3. Add MainActivity</h3>
        <img src=<%= "assets/img/" + lang + "/android/hl_add_activity.png"%> class="img-responsive"/>
        <br/>

		<h3>4. Customize MainActivity</h3>

		<p>Please pick up appropriate features you need.</p>

        <img src=<%= "assets/img/" + lang + "/android/hl_customize_activity.png"%> class="img-responsive"/>
        <br/>
        
        <p>When this step finishes, Android Studios will show project screen. You will see 2 build.gradle files, with one for project "hl" and another one
        for module "app".</p>

		<h3>5. include sgutil.aar</h3>
		
		<p>First, copy the library file "sgutil.aar" you downloaded to directoy "libs" of module "app".</p>
		
		<pre style="font-size: 1.6rem; line-height: 2.5rem;">
cp sgutil.aar ~/hl/app/libs
</pre>
		
        <p>Second, modify "build.gradle" of module "app". As shown below, add dependency on sgutil.aar, and specify "libs" as local repository so that
        gradle knows where to find it.</p>

		<pre style="font-size: 1.6rem; line-height: 2.5rem;">
dependencies {
    ...
    <span>compile(name:"sgutil", ext:"aar")</span>
}
<div>
repositories {
    flatDir { dirs 'libs' }
}        
</div></pre>
<br/>
		<h3>6. Modify AndroidManifest.xml</h3>

		<p>As shown below, change the application name to "com.sg.util.SGApplication".</p>

		<pre style="font-size: 1.6rem; line-height: 2.5rem;">
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;manifest xmlns:android="http://schemas.android.com/apk/res/android"
          package="com.cp.happylearning"&gt;

    &lt;application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        <span>android:name="com.sg.util.SGApplication"</span>
        android:theme="@style/AppTheme"&gt;
        &lt;activity android:name=".MainActivity"&gt;
            &lt;intent-filter&gt;
                &lt;action android:name="android.intent.action.MAIN"/&gt;

                &lt;category android:name="android.intent.category.LAUNCHER"/&gt;
            &lt;/intent-filter&gt;
        &lt;/activity&gt;
    &lt;/application&gt;

&lt;/manifest&gt;
</pre>
        <br />

    </section>

    <section id="init">
        <h1>Initialization</h1>
        
        <p>You need to create an instance of SGAgent in order to use SGUtil. We suggest you do this in onCreate method of MainActivity.</p>
<pre>
public class MainActivity extends AppCompatActivity implements SGAgent.SGClient {

    <span>private SGAgent agent;</span>

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        <span>agent = new SGAgent();</span>
        ...
    }
</pre>
    </section>

    <section id="lifecycle">

        <h1>SGUtil Lifecycle Events</h1>
        
        <p>You should forward Android lifecycle callbacks in MainActivity to SGAgent. Especially,
        you initialize UI before calling onCreate because SGAgent may print logs to UI. You may
        implement appendLog functions as empty ones if you do not need this feature.</p>

<pre>
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        agent = new SGAgent();
        <span>agent.onCreate(this, this);</span>
    }

    protected void onStart() {
        super.onStart();
        <span>agent.onStart();</span>
    }

    protected void onRestart() {
        super.onRestart();
        <span>agent.onRestart();</span>
    }

    protected void onResume() {
        super.onResume();
        <span>agent.onResume();</span>
    }

    protected void onPause() {
        <span>agent.onPause();</span>
        super.onPause();
    }

    protected void onStop() {
        <span>agent.onStop();</span>
        super.onStop();
    }

    protected void onDestroy() {
        <span>agent.onDestroy();</span>
        super.onDestroy();
        System.exit(0);
    }

    public void onNewIntent(Intent newIntent) {
        <span>agent.onNewIntent(newIntent);</span>
        super.onNewIntent(newIntent);
    }

    public boolean onKeyDown(int keyCode, KeyEvent event) {
        return <span>agent.onKeyDown(keyCode, event) || </span>super.onKeyDown(keyCode, event);
    }

    public void onBackPressed() {
        <span>agent.onBackPressed();</span>
    }

    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        <span>agent.onActivityResult(requestCode, resultCode, data);</span>
        super.onActivityResult(requestCode, resultCode, data);
    }

    @TargetApi(23)
    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        <span>agent.onRequestPermissionsResult(requestCode, permissions, grantResults);</span>
    }
</pre>
    </section>

    <section id="listener">
        <h1>SGUtil callback listening</h1>
        <p>Many features of SGAgent are provided as asynchronous operations. SGAgent will notify you the operation results via an interface you provided.
        That is to say, you must provide an instance of SGAgent.SGClient as the 2nd parameter of SGAgent.onCreate method. You should handle with the notified
        information within methods of the interface instance.
        The interface is defined as follows (see <a href=<%= "assets/html/" + lang + "/android/jdoc/sgutil/com/sg/util/SGAgent.SGClient.html"%>> SGAgent.SGClient </a>).
		</p>

<pre>
    public interface SGClient {
        void appendLog(String text);
        void appendLog(String text, String postfix);
        boolean onProductBegin(int num);
        void onProductFound(UProduct product);
        void onProductEnd();
        void onOrderStateChange(String productID, String orderID, String state);
        boolean onOrderInfoBegin(int num);
        void onOrderInfoFound(UOrder order);
        void onOrderInfoEnd();
        void onStateChange(int type, int orgState, int newState, int reason, int op);
    }
</pre>

    </section>

</div>

<style type="text/css">
pre > div { color:red; font-weight: bold }
pre > span { color:red; font-weight: bold }
</style>

<div class="left-side" id="myScrollspy">

    <ul class="nav nav-pills">
        <li><a href="#summary">Introduction</a></li>
        <li><a href="#environment">Development Environment</a></li>
        <li><a href="#content">SGUtil For Unity Package Content</a></li>
        <li><a href="#use">Using SGUtil For Unity</a></li>
        <li><a href="#repackage">Repackaging</a></li>
        <li><a href="#customize">Cutomization</a></li>
    </ul>

</div>

<div class="right-side">

    <section id="summary">
        <h1>Introduction</h1>
        <p>
            This page gives you a brief introduction to the flow integrating and keypoints of using SGUtil For Unity. Please read this document
			carefully to avoid mistakes and detours.
        </p>
    </section>

    <section id="environment">
        <h1>Develop Environment</h1>
        <h3>1. Download SGUtil For Unity Package</h3>
        <ul>
            <li><a href="/sdk/unity/sgutil.unitypackage">sgutil.unitypackage</a></li>
        </ul>
        <br />

        <h3>2. Import SGUtil For Unity Package</h3>
        <p>Select "Assets" menu &rarr; "Import Package" &rarr; "Custom Package", pick up the SGUtil For Unity package you downloaded.</p>
        <img src=<%= "assets/img/" + "zh-cn" + "/unity_cn/sd_import_package.png"%> class="img-responsive"/>
        <br />

        <p>Unity will show list of package files.</p>
        <img src=<%= "assets/img/" + "zh-cn" + "/unity_cn/sd_package_content.png"%> class="img-responsive"/>
		<br/>

		<p>Click "Import" button to begin importing.</p>

    </section>

    <section id="content">

        <h1>SGUtil For Unity Package Content</h1>
        <h3>1. Directory Structure</h3>
		<p>The directoy structure of SGUtil For Unity package is as follows.</p>

		<pre>
Plugins\Android\AndroidManifest.xml
	Android project manifest file
Plugins\Android\bin\SGUtil_Context.jar
	Interface class between SGUtil (java) and Unity.
Plugins\Android\libs\SGUtil.aar
	SGUtil software package
Plugins\Android\libs\SGUtil_GameServer.jar
	Implementation of demo game server
Plugins\Android\libs\android-support-v4.jar
	Android support library version 4
Plugins\Android\res\drawable-hdpi\sg_logo.png
	SG Studios logo
Plugins\Android\res\drawable-ldpi\sg_logo.png
	SG Studios logo
Plugins\Android\res\drawable-mdpi\sg_logo.png
	SG Studios logo
Plugins\Android\res\drawable-xhdpi\sg_logo.png
	SG Studios logo
Plugins\Android\res\drawable-xxhdpi\sg_logo.png
	SG Studios logo
Plugins\Android\res\drawable-xxxhdpi\sg_logo.png
	SG Studios logo
Plugins\Android\res\values\strings.xml
	Text resources
Plugins\MiniJSON.cs
	Simple JSON parser

Scripts\SDK\SGU.cs
	Interface APIs to call SGUtil functions
Scripts\SDK\SGUCallback.cs
	Callbacks to be called by SGUtil_Context. Convert JSON data to classes and dispatch to callback implementation (entity).
Scripts\SDK\SGUCallbackEntity.cs
	Callback interface definition
Scripts\SDK\SGUInterface.cs
	Abstract class to define interface APIs to call SGUtil functions
Scripts\SDK\SGUInterfaceAndroid.cs
	Interface API implementation for Android
Scripts\SDK\SGUInterfaceDefault.cs
	Default interface API implementation (not implemented)
Scripts\SDK\SGUInterfaceIOS.cs
	Interface API implementation for iOS (not implemented)
Scripts\SG\SGUCallbackEntityObject.cs
	Callback interface implementation demo</pre>

    </section>

    <section id="use">

        <h1>Using SGUtil For Unity</h1>
        <h3>1. Customize AndroidManifest.xml</h3>
		<p>You may change AndroidManifest.xml except the blue part shown below.</p>

		<pre>
&lt;manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.sg.util.unitydemo"
    android:versionCode="1"
    android:versionName="1.0" &gt;

    &lt;uses-sdk
        android:minSdkVersion="18"
        android:maxSdkVersion="25"
        android:targetSdkVersion="23" /&gt;

    &lt;uses-permission android:name="android.permission.INTERNET" /&gt;
    &lt;uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" /&gt;
    &lt;uses-permission android:name="android.permission.ACCESS_WIFI_STATE" /&gt;
    &lt;uses-permission android:name="android.permission.WAKE_LOCK" /&gt;

    &lt;application
        android:allowBackup="true"
        android:icon="@drawable/sg_logo"
        android:label="@string/sgutil_unitydemo"
        android:name="<span style="color:blue">com.sg.util.SGApplication</span>"&gt;
        
        &lt;activity
            android:name="<span style="color:blue">com.sg.util.SGUtilUnityActivity</span>"
            android:label="@string/sgutil_unitydemo" 
            android:screenOrientation="landscape"
            android:launchMode="singleTask"
            android:configChanges="orientation|keyboardHidden|screenSize"&gt;
            
            &lt;intent-filter&gt;
                &lt;action android:name="android.intent.action.MAIN" /&gt;
                &lt;category android:name="android.intent.category.LAUNCHER" /&gt;
            &lt;/intent-filter&gt;            
            
        &lt;/activity&gt;
    &lt;/application&gt;

&lt;/manifest&gt;
</pre>

		<p>Please change/extend SGUtilUnityActivity.java by yourselves if you need to request critical permission dynamically and re-generate SGUtil_Context.jar.</p>

        <h3>2. Keypoints of Using SGUtil For Unity</h3>

        <p>We above metioned SGU.cs provides interface APIs to encapsulate SGUtil functions. Calling these APIs results in asynchronous notifcations to be delivered
        from SGUtil. Therefore there must be an object to receive and handle those notifications. We create a SGUCallbackEntity intance object and pass it as a parameter
		to SGU.Init. This object must get run at the beginning of application run and be there all the time.</p>

        <p>We take SGUCallbackEntityObject as an example to give a little explanation.</p>

		<pre>
public class SGUCallbackEntityObject : MonoBehaviour, SGUCallbackEntity {

    void Start () {
        SGU.initialize(this);	// SGU class initialization
        // call Init interface
        SGU.Init("com.sg.util.SGUtilUnityGameServer", false);
    }
</pre>

        <p>Besides MonoBahaviour, SGUCallbackEntityObject extends SGUCallbackEntity interfaceï¼Œimplemting methods defined by SGUCallbackEntity.
		It calls SGU.initialize to initialize SGU at the very beginning, and then calls SGU.Init to initialize SGUtil For Unity.</p>

        <p>The parameter of SGU.initialize is a SGUCallbackEntity instance, hence we pass 'this' as argument. Most callbacks
		has the first parameter of type SGUResult, which is a enumeration defined as below. Please refer to the
		comment for their meanings.</p>
		<pre>
public enum SGUResult
{
    RESULT_OK,          // operation succeeded
    RESULT_NO_NEED,     // operation already done before
    RESULT_FAIL,        // operation failed
    RESULT_CANCELLED,   // operation cancelled
    RESULT_ASYNC,       // operation is aynchronous, there might be other callbacks later
    RESULT_ITEM_BEGIN,  // beginning of data items
    RESULT_ITEM,        // data item
    RESULT_ITEM_END,    // end of data items
    RESULT_ALL
}
        </pre>
        <p>As all API calls are performed asynchronously, one API call may result in multiple callback notifications.
           If the first notification is RESULT_ASYNC, there will be more notifications for operation result and data items.
           All data items are notified with RESULT_ITEM. There may be a RESULT_ITEM_BEGIN before, and a RESULT_ITEM_END
           after data items if a API returns multiple items.
            </p>
    
        <p>The first parameter of SGU.Init is an instance of game server interface. Here we use "com.sg.util.SGUtilUnityGameServer", which is a demo implementation.
		For details of game server interface, please refer to 
		<a href=<%= "assets/html/" + lang + "/android/jdoc/sgutil/com/sg/util/SGGameServerInterface.html"%>> SGGameServerInterface </a>. The second parameter of SGU.Init
		specifies whether SGUtil should automatically check order state and let game server mark it as delivered after user completes UI operation to buy a product.
        If set it to false, you need to manually do the job by calling GetOrderState later.
        Other function cannot be executed during the automatic checking period. If you think it a problem, please set it to false and
        call GetOrderState to check order state by yourself.
        </p>

		<p>Below is SGUCallbackEntityObject.cs in SGUtil For Unity package, wchich is a dummy implementation of SGUCallbackEntity.
        It is shown here for your reference only.</p>
		<%- include ../code/unity-china-sgutil-sample-obj.html -%>

    </section>

    <section id="repackage">

        <h1>Repackaging</h1>

		<p>After integrating SGUtil For Android, you may let Unity to generate an APK file and run it on Android devices. However, this APK
		only contains an pre-embedded demo channel, which simply completes all functions with dummy data. In order to bind a real channel, please
		upload your APK to SG Studios website and download the final APK after repackaging is finished.
		</p>

	</section>

    <section id="customize">

        <h1>Customization</h1>

		<p>The source files of interfaces between SGUtil and Unity are listed below. You may make proper changes if you need.</p>

        com.sg.util.SGUtilUnityActivity.java
        <%- include ../code/unity-china-sgutil-context.html -%>
        <br/>
        com.sg.util.SGUtilUnityGameServer.java
        <%- include ../code/unity-china-sgutil-gameserver.html -%>
        <br/>
        com.sg.util.SGGameServerDemo.java
        <%- include ../code/unity-china-sgutil-gameserver-demo.html -%>

	</section>

</div>

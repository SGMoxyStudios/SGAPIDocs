<style type="text/css">
pre > div { color:red; font-weight: bold }
pre > span { color:red; font-weight: bold }
</style>
<div class="left-side" id="myScrollspy">

    <ul class="nav nav-pills">
        <li><a href="#summary">Android集成指南</a></li>
        <li><a href="#environment">開發環境設定</a></li>
        <li><a href="#import">引用SGUtil</a></li>
        <li><a href="#init">SGUtil初始化</a></li>
        <li><a href="#lifecycle">SGUtil生命週期事件</a></li>
        <li><a href="#listener">SGUtil回調監聽</a></li>
        <li><a href="#repackage">重新打包</a></li>
    </ul>

</div>

<div class="right-side">

    <section id="summary">
        <h1>Android 集成指南</h1>
        <p>
            在中國大陸有很多應用（遊戲）渠道，如 UC、小米、華爲等，各家渠道都有自己的規範，而且他們
            的規範也在不斷地變化。因此將自己的應用接入多家渠道是一個非常艱鉅的工作。針對這個問題，
            SG Studios 提供了一個統一的解決方案，將各家渠道的客戶端和服務器端兩個方面的介面都加以抽
            象。開發者不再需要瞭解各家規範的不同細節了。
            對客戶端來說，開發者只要接入 SGUtil 軟件包，並提供應用的 APK 檔案，就可由 SG Studios 來針對
            某一渠道進行二次打包，大大減輕了開發者的接入工作量。
            對服務器端來說，開發者只要實現一個簡單的遊戲服務器（如果您不需要高級的功能，也可以用
            SG Studios 提供的服務器）就可以了。
        </p>
        <p>
            爲了達到這個目的，開發者必須在具體的渠道和 SG Studios 都註冊自己的應用，並將渠道爲您生成
            的各種信息共享給 SG Studios。
        </p>
        <p>
            本文介紹接入 SGUtil 的接入流程。詳細資料請看<a href=<%= "assets/html/" + lang + "/android/jdoc/sgutil/index.html"%>> SGUtil 文檔。</a>
        </p>
    </section>

    <section id="environment">
        <h1>開發環境設定</h1>
        <h3>1. SGUtil 支持的 Android 版本 : </h3>
        <p>SGUtil 支持的 Android 最低版本爲 4.4 (KitKat, API Level 19)。建議使用 Android Studio 開發。</p>
        <img src=<%= "assets/img/" + lang + "/android/hl_android_kitkat.png"%> class="img-responsive"/>
        <br />

        <h3>2. 下載 SGUtil 軟件庫</h3>
        <ul>
            <li><a href="/sdk/android/sgutil.aar">SGUtil Library (sgutil.aar) 下載</a></li>
        </ul>
        <br />
        
        <h3>3. 示例程式</h3>
        <%- include ../code/java-china-sgutil-sample-app.html -%>

    </section>

    <section id="import">

        <h1>引用 SGUtil</h1>
        
		<h3>1. 啓動 Android Studios ，新建一個項目</h3>

		<p>示例中使用的名字爲 "HappyLearning" ，目錄名爲 "hl" ，組織名爲 "cp.com "。</p>
		
        <img src=<%= "assets/img/" + lang + "/android/hl_new_project.png"%> class="img-responsive"/>
        <br/>

		<h3>2. 選擇目標設備</h3>
        <img src=<%= "assets/img/" + lang + "/android/hl_target_dev.png"%> class="img-responsive"/>
        <br/>

		<h3>3. 添加 MainActivity</h3>
        <img src=<%= "assets/img/" + lang + "/android/hl_add_activity.png"%> class="img-responsive"/>
        <br/>

		<h3>4. 定製 MainActivity</h3>

		<p>請根據需要選擇合適的特性。</p>

        <img src=<%= "assets/img/" + lang + "/android/hl_customize_activity.png"%> class="img-responsive"/>
        <br/>
        
        <p>這一步結束後 Android Studios 就會顯示項目界面。你會看到兩個 build.gradle 檔案，一個是項目 hl 的，一個是模塊 app 的。</p>

		<h3>5. 引入 sgutil.aar</h3>
		
		<p>首先將下載的 sgutil.aar 檔案放到模塊 app 的 libs 目錄下。</p>
		
		<pre style="font-size: 1.6rem; line-height: 2.5rem;">
cp sgutil.aar ~/hl/app/libs
</pre>
		
        <p>接下來修改模塊 app 的 build.gradle 檔案。如下所示，添加對 sgutil.aar 的依賴，並指定 libs 目錄爲本地倉庫，以便 gradle 能找到 sgutil.aar。</p>

		<pre style="font-size: 1.6rem; line-height: 2.5rem;">
dependencies {
    ...
    <span>compile(name:"sgutil", ext:"aar")</span>
}
<div>
repositories {
    flatDir { dirs 'libs' }
}        
</div></pre>
<br/>
		<h3>6. 修改 AndroidManifest.xml</h3>

		<p>如下所示，將 application 的名字改爲 "com.sg.util.SGApplication" 。</p>

		<pre style="font-size: 1.6rem; line-height: 2.5rem;">
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;manifest xmlns:android="http://schemas.android.com/apk/res/android"
          package="com.cp.happylearning"&gt;

    &lt;application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        <span>android:name="com.sg.util.SGApplication"</span>
        android:theme="@style/AppTheme"&gt;
        &lt;activity android:name=".MainActivity"&gt;
            &lt;intent-filter&gt;
                &lt;action android:name="android.intent.action.MAIN"/&gt;

                &lt;category android:name="android.intent.category.LAUNCHER"/&gt;
            &lt;/intent-filter&gt;
        &lt;/activity&gt;
    &lt;/application&gt;

&lt;/manifest&gt;
</pre>
        <br />

    </section>

    <section id="init">
        <h1>SGUtil 初始化</h1>
        
        <p>爲了使用 SGUtil ，你必須首先創建一個 SGAgent 的實例。建議在 MainActivity 的 onCreate 方法中做這件事。
        你也必須在 SGAgent 實例創建後設置你的遊戲服務器介面實例，否則整個登入過程不會開始。
        </p>
<pre>
public class MainActivity extends AppCompatActivity implements SGAgent.SGClient {

    <span>private SGAgent agent;</span>

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        <span>agent = new SGAgent();</span>
        ...
        <span>agent.setGameServer(new YourGameServerImplementation());</span>
        ...
    }
</pre>
    </section>

    <section id="lifecycle">

        <h1>SGUtil 生命週期事件</h1>
        
        <p>您在 MainActivity 中必須把 Android 系統對 MainActivity 的生命週期回調分發給 SGAgent。特別地，
        在 onCreate 方法中，您必須先準備好 UI ，因爲 SGAgent 可能希望向UI上打印日誌。如果您不希望這樣，
        就將下述的 appendLog 方法實現爲空，這樣的話您也可以在 SGAgent.onCreate 之後再準備 UI。</p>

<pre>
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        agent = new SGAgent();
        <span>agent.onCreate(this, this);</span>
        <span>agent.setGameServer(new YourGameServerImplementation());</span>
    }

    protected void onStart() {
        super.onStart();
        <span>agent.onStart();</span>
    }

    protected void onRestart() {
        super.onRestart();
        <span>agent.onRestart();</span>
    }

    protected void onResume() {
        super.onResume();
        <span>agent.onResume();</span>
    }

    protected void onPause() {
        <span>agent.onPause();</span>
        super.onPause();
    }

    protected void onStop() {
        <span>agent.onStop();</span>
        super.onStop();
    }

    protected void onDestroy() {
        <span>agent.onDestroy();</span>
        super.onDestroy();
        System.exit(0);
    }

    public void onNewIntent(Intent newIntent) {
        <span>agent.onNewIntent(newIntent);</span>
        super.onNewIntent(newIntent);
    }

    public boolean onKeyDown(int keyCode, KeyEvent event) {
        return <span>agent.onKeyDown(keyCode, event) || </span>super.onKeyDown(keyCode, event);
    }

    public void onBackPressed() {
        <span>agent.onBackPressed();</span>
    }

    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        <span>agent.onActivityResult(requestCode, resultCode, data);</span>
        super.onActivityResult(requestCode, resultCode, data);
    }

    @TargetApi(23)
    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        <span>agent.onRequestPermissionsResult(requestCode, permissions, grantResults);</span>
    }
</pre>
    </section>

    <section id="listener">
        <h1>SGUtil 回調監聽</h1>
        <p> SGAgent 的很多功能是異步實現的，在您調用這些功能後， SGAgent 將會通過您提供的介面通知操作結果。所以在
        您調用 SGAgent.onCreate 的時候必須提供一個 SGAgent.SGClient 介面的實現。你必須在這個介面的方法中處理 SGAgent
        的通知。這個介面的定義如下（參見<a href=<%= "assets/html/" + lang + "/android/jdoc/sgutil/com/sg/util/SGAgent.SGClient.html"%>> SGAgent.SGClient </a>）。
		</p>

<pre>
    public interface SGClient {
        void appendLog(String text);
        void appendLog(String text, String postfix);
        boolean onProductBegin(int num);
        void onProductFound(UProduct product);
        void onProductEnd();
        void onOrderStateChange(String productID, String orderID, String state);
        boolean onOrderInfoBegin(int num);
        void onOrderInfoFound(UOrder order);
        void onOrderInfoEnd();
        void onTreasureListFound(String[] treasures);
        void onTreasureChange(String name, int count);
        void onLogValue(String key, int value);
        void onStateChange(int type, int orgState, int newState, int reason, int op, String arg);
        void onExtMethodNotification(String cookie, int code, String message);
        void onExitCancelled();
        void onFuncRequest(String func, String id, String arg);
    }
</pre>

    </section>

    <section id="repackage">

        <h1>重新打包</h1>

		<p>您接入 SGUtil 軟件包後，使用 Android Studio 開發環境可以生成 APK 檔案，並可以在 Android 設備上運行。但是這個 APK 中只有
		SGUtil 內置的模擬渠道。要想真正地綁定某個具體渠道，請將 APK 上傳到 SG Studios 的網站進行打包並下載最終 APK 檔案。
		</p>

	</section>

</div>
